plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.jetbrains.kotlin.android)
}

android {
    signingConfigs {
        release {
            storeFile file('/opt/keystore.jks')
            keyAlias 'key0'
        }
    }
    compileSdk 33

    defaultConfig {
        applicationId "net.alacrem.aegis"
        minSdk 33
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        signingConfig signingConfigs.release
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = '11'
        languageVersion = "1.7"
    }
    buildFeatures {
        viewBinding true
    }
    namespace 'net.alacrem.aegis'
}

// UniFFI
android.applicationVariants.all { variant ->
    def libTask = tasks.register("build${variant.name.capitalize()}UniFFINativeLib", Exec) {
        workingDir "${project.rootDir}"

        var args = ['cargo', 'ndk', '--manifest-path=../aegislib/Cargo.toml',
                    '-tx86_64', '-tarm64-v8a',
                    '-o', 'app/src/main/jniLibs/',
                    'build', '--features=ffi']
        if (variant.name == "release")
            args.add("--release")
        println "Compiling native aegis library: ${args}"
        commandLine args
    }
    variant.javaCompileProvider.get().dependsOn(libTask)

    def genTask = tasks.register("generate${variant.name.capitalize()}UniFFIBindings", Exec) {
        workingDir "${project.rootDir}/.."
        def aegislibPath = "${project.rootDir}/../aegislib"
        def udlPath = "${aegislibPath}/src/client.udl"

        println "Generating binding for "+udlPath
        // Runs the bindings generation, note that you must have uniffi-bindgen installed and in your PATH environment variable
        commandLine 'cargo', 'run', '--features=ffi', '--bin=uniffi-bindgen',
                    'generate', udlPath, '--language', 'kotlin', '--out-dir', "${buildDir}/generated/source/uniffi/${variant.name}/java"
    }
    variant.javaCompileProvider.get().dependsOn(genTask)
    def sourceSet = variant.sourceSets.find { it.name == variant.name }
    sourceSet.java.srcDirs += new File("${buildDir}/generated/source/uniffi/${variant.name}/java")
    // XXX: I've been trying to make this work but I can't, so the compiled bindings will show as "regular sources" in Android Studio.
    //idea.module.generatedSourceDirs += file("${buildDir}/generated/source/uniffi/${variant.name}/java/uniffi")
}

dependencies {
    // Base
    implementation libs.androidx.core.ktx
    implementation libs.androidx.appcompat
    implementation libs.androidx.annotation
    implementation libs.androidx.constraintlayout
    implementation libs.androidx.lifecycle.livedata.ktx
    implementation libs.androidx.lifecycle.viewmodel.ktx
    implementation libs.androidx.lifecycle.runtime.ktx
    implementation libs.androidx.swiperefreshlayout
    implementation libs.androidx.preference.ktx
    implementation libs.material
    testImplementation libs.junit
    androidTestImplementation libs.androidx.junit
    androidTestImplementation libs.androidx.espresso.core

    // FFI
    implementation libs.jna
}
